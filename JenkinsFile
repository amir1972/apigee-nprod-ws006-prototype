/* groovylint-disable LineLength */
// Jenkins Shared Libraries

@Library('devops-jenkins-libs@tflib_update_v2') _
import com.jenkins_stdlib.vault.*
import com.jenkins_stdlib.shell.*
import com.jenkins_stdlib.facts.*
import com.jenkins_stdlib.parameters.*
import com.jenkins_stdlib.apis.*
import com.jenkins_stdlib.ansible.*

platformJenkinsLibs=library identifier: 'platform-jenkins-libs@master', retriever: modernSCM(
          [$class: 'GitSCMSource',
          remote: 'https://git.gwl.bz/scm/pdpc/platform_jenkins_sharedlibs.git',
          credentialsId: 'smo_sa_git'])

// Scripted pipeline

node('ecs-tfenv') {

    def workspace = pwd() + '/' + env.BUILD_NUMBER

    // GCP DevOps Squad App Role
    def ROLE_ID = 'c948e9d5-b3b0-29b1-5faa-7e60b9e6fed6'

    // GCP Project Name e.g : tf-gcp-net-mgmt
    def gcp_project_name = 'apigee-nprod-ws004-prototype'

    ws("${workspace}") {
    
    checkout scm

    def gcp_app_credentials_file = "${workspace}/${gcp_project_name}.json"

    env.GOOGLE_APPLICATION_CREDENTIALS = "${workspace}/${gcp_project_name}.json"

    currentBuild.result = 'SUCCESS'

    def props = [
      buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '2', daysToKeepStr: '90', numToKeepStr: '30'))
    ]

    properties(props)

    // Instantiate Vault environment
    def vault = new VaultCli(
                CORP.VAULT,
                new Shell(this, true)
        )

    // Authenticate to Vault using Approle
    withCredentials([
                string(credentialsId: 'tfonlyaccess-gcp-apigee-squad-approle-secret-id', variable: 'jenkinssecretid')
        ]) {
                vault.authenticate(ROLE_ID, jenkinssecretid)
        }

    try {
        // Setup GCP Auth

        stage('Setup-GCP-Auth') {
            ansiColor('xterm') {
                def privateKeyData = vault.gcpSecretEngine("gcp/static-account/${gcp_project_name}/key", "private_key_data")
                def shell = new Shell(this, true)
                shell.execute("""
                    set +x
                    echo $privateKeyData  | base64 -d > ${gcp_project_name}.json
                    """)
            }
        }

        // Set Consul Access Token
        stage('Consul-Token-Setup') {
            ansiColor('xterm') {
                def access_token = vault.secret("secret/consul/creds", "access_token")
                def shell = new Shell(this, true)
                shell.execute("""
                    set +x
                    export access_token=$access_token
                    """)
            }
        }

        // Terraform Plan
        stage('TF_PLAN') {
            ansiColor('xterm') {
                terraformPlan('$gcp_project_name', 'terraform.tfvars' , '-backend-config="access_token=\${access_token}"')
            }
        }


        // Approval Step
        stage('wait approval') {
          timeout(time:10, unit:'MINUTES') {
              input message:'Approve terraform plan?'
          }
        }

        // Terraform Apply
        stage('TF_APPLY') {
            ansiColor('xterm') {
                terraformApply('$gcp_project_name', 'terraform.tfvars', 'CONFIRM_APPLY')
            }
        }
    } catch (err) {
          currentBuild.result = 'FAILURE'
          throw err
    }

    finally {
        cleanWs()
    }
    }
}
